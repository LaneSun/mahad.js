(t=>{const e=0,s=1,r=2,i=Symbol("data_to"),n=Symbol("data_to_field"),o=(t,e)=>s=>{const r=Symbol();return t.push([s,r]),s.listen(r,e)},h=Object.getOwnPropertyDescriptors(class{get[i](){if(this[n])return this[n];{const t=Array(3).fill(0).map((t=>new Map));return this[n]=t,t}}modify(...t){return this.edit([0,...t])}set_to(t,e,s=[]){const r=this[i];for(const i in e)r[i].set(t,[e[i],s])}unset_to(t){for(const e of this[i])e.delete(t)}listen(t,e){return this.set_to(t,{[r]:e}),this}bind(t,e,s){return t.set_to(this,e,s),this}bind_clone(t){return this.assign(t),this.bind(t,{[r]:(t,e,s,r)=>{e.edit(...r)}})}make_bind(t,e){return(new this.constructor).bind(this,t,e)}bclone(){return(new this.constructor).bind_clone(this)}}.prototype);delete h.constructor,t.MahadArray=class extends Array{static unfold(t,e){const s=new this;for(;;){let r;if([t,r]=e(t),void 0===r)break;s.push(r)}return s.reverse()}toString(){return`(${this.map((t=>t.toString())).join(" ")})`}get val(){return this[0]}edit(...t){const e=this[i];let s=null;for(const r of t){const[t,i]=r;switch(t){case 0:const t=this.splice(i,r[2],...r[3]);for(const[s,[i,n]]of e[0])i(this,s,n,r,t,r[3]);s=t;break;case 1:const n=this.splice(i,r[2]);this.splice(i+r[3],0,...n);for(const[t,[s,i]]of e[1])s(this,t,i,r,n)}}for(const[s,[r,i]]of[...e[2]])r(this,s,i,t);return s}move(...t){return this.edit([1,...t])}move_at(t,e,s){return this.move(this.indexOf(t),e,s)}move_before(t,e,s){return this.move(this.indexOf(t)-e,e,s)}move_after(t,e,s){return this.move(this.indexOf(t)+1,e,s)}move_range(t,e,s){const r=this.indexOf(t),i=this.indexOf(e)+1;return this.move(r,i-r,s)}exchange(t,e,s=void 0,r=void 0){let i,n,o,h=this.indexOf(t);return void 0===s?(i=h+1,n=this.indexOf(e),o=n+1):void 0===r?(i=this.indexOf(e)+1,n=this.indexOf(s),o=n+1):(i=this.indexOf(e)+1,n=this.indexOf(s),o=this.indexOf(r)+1),[h,i,n,o]=[h,i,n,o].sort(),i===n?this.move(h,i-h,o-n):this.edit([1,h,i-h,n-i],[1,n,o-n,h-n])}modify_at(t,e,s){return this.modify(this.indexOf(t),e,s)}modify_before(t,e,s){return this.modify(this.indexOf(t)-e,e,s)}modify_after(t,e,s){return this.modify(this.indexOf(t)+1,e,s)}modify_range(t,e,s){const r=this.indexOf(t),i=this.indexOf(e)+1;return this.modify(r,i-r,s)}delete(t,e=1){return this.modify(t,e,[])}prefix(...t){return this.modify(0,0,t)}postfix(...t){return this.modify(this.length,0,t)}unprefix(t){return this.delete(0,t)}unpostfix(t){return this.delete(this.length-t,t)}assign(t){return this.modify(0,this.length,t)}set(t,e){return this.modify(t,1,[e])}set val(t){this.modify(0,1,[t])}guard(t,s,r){if(this.set_to(t,{[e]:(t,e,i,[,n],o,h)=>{if(r)for(let t=o.length-1;t>=0;t--)r(o[t],n+t);if(s)for(let t=0;t<h.length;t++)s(h[t],n+t)}}),s)for(let t=0;t<this.length;t++)s(this[t],t);return this}bind_map(t,r){const i=[].guard(null,null,(t=>t.forEach((([t,e])=>t.unset_to(e))))),n=(t,e,s,[,i,n,h])=>{const d=[];e.modify(i,n,h.map(((t,n)=>{const h=i+n,c=[],a=()=>{const i=[];e.set(h,r(t,h,o(i,a))),s.set(h,i)},u=r(t,h,o(c,a));return d.push(c),u}))),s.modify(i,n,d)};return n(0,this,i,[0,0,0,t]),this.bind(t,{[s]:(t,e,s,r)=>{e.edit(r),s.edit(r)},[e]:n},i)}bind_reduce(t,s,r){const i=[],n=()=>{i[0]?.forEach((([t,e])=>t.unset_to(e)));const e=[],h=o(e,n);this.val=t.reduce(((t,e,r)=>s(t,e,r,h)),r),i[0]=e};return n(),this.bind(t,{[e]:n},i)}bind_sort(t,s){const r=[],i=()=>{r[0]?.forEach((([t,e])=>t.unset_to(e)));const e=[],n=o(e,i);this.assign(t.toSorted(((t,e)=>s(t,e,n)))),r[0]=e};return i(),this.bind(t,{[e]:i},r)}bmap(t){return(new this.constructor).bind_map(this,t)}breduce(t,e){return(new this.constructor).bind_reduce(this,t,e)}bsort(t){return(new this.constructor).bind_sort(this,t)}},Object.defineProperties(MahadArray.prototype,h);const d=Object.getOwnPropertyDescriptors(MahadArray.prototype);delete d.constructor,Array.unfold=MahadArray.unfold,Object.defineProperties(Array.prototype,d),t.MahadObject=class extends Object{static unfold(t,e){const s=new this;for(;;){let r;if([t,k,r]=e(t),void 0===r)break;s[k]=r}return s}reduce(t,e){const s=Object.entries(this);e??=s.pop();for(const[r,i]of s)e=t.call(this,e,i,r);return e}toString(){return`(${Object.entries(this).map((([t,e])=>t.toString()+":"+e.toString())).join(" ")})`}edit(...t){const e=this[i];let s=null;for(const r of t){const[t,i,n]=r;if(0===t){const t=this[i];void 0!==n?this[i]=n:delete this[i];for(const[s,[i,o]]of e[0])i(this,s,o,r,t,n);s=t}}for(const[s,[r,i]]of[...e[2]])r(this,s,i,t);return s}delete(...t){return this.edit(t.map((t=>[2,t,void 0])))}assign(t){return this.edit(Object.entries(t).map((([t,e])=>[2,t,e])))}set(t,e){return this.edit([2,t,e])}guard(t,s,r){if(this.set_to(t,{[e]:(t,e,i,[,n],o,h)=>{r&&void 0!==o&&r(o,n),s&&void 0!==h&&s(h,n)}}),s)for(const[t,e]of Object.entries(this))s(e,t);return this}bind_reduce(t,e,s){const i=[],n=()=>{i[0]?.forEach((([t,e])=>t.unset_to(e)));const r=[],h=o(r,n);this.val=t.reduce(((t,s,r)=>e(t,s,r,h)),s),i[0]=r};return n(),this.bind(t,{[r]:n},i)}breduce(t,e){return(new this.constructor).bind_reduce(this,t,e)}},Object.defineProperties(MahadObject.prototype,h);const c=Object.getOwnPropertyDescriptors(MahadObject.prototype);delete c.constructor,Object.unfold=MahadObject.unfold,Object.defineProperties(Object.prototype,c)})(globalThis),(t=>{const e={apply:(t,e,s)=>{const r=new MahadElem;return s.length&&r.attr("inner",s),r},get:(t,e)=>{const r=()=>{};return r.ename=e,r.attrs=[],new Proxy(r,s)}},s={apply:(t,e,s)=>{const r=new MahadElem(t.ename);s.length&&r.attr("inner",s);for(const[e,s]of t.attrs)r.attr(e,s);return r},get:(t,e)=>(...r)=>{const i=()=>{};return i.ename=t.ename,i.attrs=e.startsWith("$")?t.attrs.concat([[e.slice(1),r[0]]]):t.attrs.concat([[e,r]]),new Proxy(i,s)}};t.ME=new Proxy((()=>{}),e);const r=Symbol("mahad"),i={id:t=>[e=>t.id=e],title:t=>[e=>t.title=e],text:t=>[e=>t.textContent=e],class:t=>[e=>t.classList.add(e),e=>t.classList.remove(e)],src:t=>[e=>t.src=e],value:(t,e)=>(t.addEventListener("change",(()=>{e.val=t.value})),[e=>t.value=e]),style:t=>[(e,s)=>e.guard(t,(e=>t.style.setProperty(s,e))),(e,s)=>{t.style.removeProperty(s),e.unset_to(t)}],inner:t=>[(e,s)=>{const r=e instanceof MahadElem?e.elem:e instanceof Node?e:new Text(e);s===t.childNodes.length?t.append(r):t.insertBefore(r,t.childNodes[s])},(e,s)=>{t.childNodes[s].remove()}]};t.MahadElem=class t extends MahadObject{constructor(t="div"){super(),this.name=t,this.elem=document.createElement(this.name),this.elem[r]=this}attr(t,e=[""]){const s=i[t];return s&&this.set(t,e.guard(null,...s(this.elem,e))),this}attach(e){if("string"==typeof e)document.querySelector(e).append(this.elem);else if(e instanceof HTMLElement)e.append(this.elem);else{if(!(e instanceof t))throw"Unexpect attach target";e.postfix(this)}}}})(globalThis);